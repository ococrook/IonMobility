STAlist <- group_split(tppData_S, uniqueID)
STAlist <- lapply(STAlist, function(x) data.frame(x))
prior_1 =  prior(gamma(7, 0.01), nlpar = "a", lb = 0) +
prior(gamma(7, 0.4), nlpar = "b", lb = 0) +
prior(beta(1, 20), nlpar = 'p', lb = 0, ub = 1) +
prior(normal(0, 0.05), class = "sigma")
null_model_res <- brm_multiple(brms::bf(y ~ (1 - p)/(1 + exp(b - (a/Tpr))) + p, a+b+p~1, nl = TRUE),
data = STAlist[c(71)],
prior = prior_1,
control = list(adapt_delta = 0.8),
sample_prior = "no",
combine = FALSE,
future = FALSE,
chains = 2,
refresh = 0)
prior_2 =  prior(gamma(7, 0.01), nlpar = "a", lb = 0) +
prior(gamma(7, 0.4), nlpar = "b", lb = 0) +
prior(beta(1, 20), nlpar = 'p', lb = 0, ub = 1) +
prior(normal(0, 0.05), dpar = "sigma", lb = 0)
alt_model_res <- brm_multiple(brms::bf(formula = y ~ ((1-p)/(1+exp(-(a/Tpr-b)))+p), a ~ 0 + cond, b ~ 0 + cond, p ~ 0 + cond, nl = TRUE,
sigma ~ 0 + cond, family = brmsfamily('gaussian', link_sigma = 'identity')),
prior = prior_2,
data = STAlist[c(71)],
control = list(adapt_delta = 0.99, max_treedepth = 15),
sample_prior = "no",
combine = FALSE,
future = FALSE,
chains = 2,
refresh = 0)
logmlsignull <- sapply(null_model_res, marlik_sigmoid_null)
logmlsigalt <- sapply(alt_model_res, marlik_sigmoid_alt)
0.01 * exp(logmlsigalt)/(exp(logmlsigalt) * 0.01 + 0.99 * exp(logmlsignull))
fitted_values <- fitted(alt_model_res[[1]])
head(fitted_values)
plot(alt_model_res[[1]], points = TRUE)
data <- STAlist[[71]]
conditions <- data.frame(cond = unique(data$cond))
rownames(conditions) <- unique(data$cond)
alt_sig <- conditional_effects(
alt_model_res[[1]], conditions = conditions,
re_formula = NULL, method = "fitted"
)
plot(alt_sig)
alt_sig.df = as.data.frame(alt_sig$Tpr) %>%
mutate('Abundance' = estimate__)
alt_cond_A = alt_sig.df %>%
filter(cond__ == 'A' )
alt_cond_B = alt_sig.df %>%
filter(cond__ == 'B' )
plot(alt_sig)
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)], guide_legend(title="Condition")) +
theme_classic() + ggtitle("ABBC4 sigmoid model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
STAlist[c(71)]
#saveRDS(alt_model_res, file = "ALS2sig.rds")
#saveRDS(alt_model_res, file = "ABCC4.rds")
saveRDS(alt_model_res, file = "ACYP1.rds")
fitted_values <- fitted(alt_model_res[[1]])
head(fitted_values)
plot(alt_model_res[[1]], points = TRUE)
data <- STAlist[[71]]
conditions <- data.frame(cond = unique(data$cond))
rownames(conditions) <- unique(data$cond)
alt_sig <- conditional_effects(
alt_model_res[[1]], conditions = conditions,
re_formula = NULL, method = "fitted"
)
plot(alt_sig)
alt_sig.df = as.data.frame(alt_sig$Tpr) %>%
mutate('Abundance' = estimate__)
alt_cond_A = alt_sig.df %>%
filter(cond__ == 'A' )
alt_cond_B = alt_sig.df %>%
filter(cond__ == 'B' )
plot(alt_sig)
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)], guide_legend(title="Condition")) +
theme_classic() + ggtitle("ACYP1 sigmoid model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)], guide_legend(title="Condition")) +
theme_classic() + ggtitle("ACYP1 sigmoid model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
prior_1_gp =  prior(gamma(7, 0.01), nlpar = "a", lb = 0) +
prior(gamma(7, 0.4), nlpar = "b", lb = 0) +
prior(beta(1, 20), nlpar = 'p', lb = 0, ub = 1)  +
prior(normal(0, 0.05), class = "sigma") +
prior(lognormal(-0.5, 0.5), class = "lscale",  coef = "gpTpr", nlpar =  "f") +
prior(student_t(3, 0, 0.5), class = 'sdgp', nlpar = "f")
fit_null_semi = brm_multiple(brms::bf(formula = y ~ ((1-p)/(1+exp(-a/Tpr + b))+p) + f, a+b+p ~ 1, nl = TRUE,
f ~ 0 + gp(Tpr, k = 10, c = 5/4),
family = gaussian()),
prior = prior_1_gp,
data = STAlist[71],
control = list(adapt_delta = 0.99),
sample_prior = "no",
combine = FALSE,
future = TRUE,
chains = 2,
thin = 2,
refresh = 0)
logmlseminull <- sapply(fit_null_semi, try(marlik_semipar_null))
prior_2_gp = prior(gamma(7, 0.01), nlpar = "a", lb = 0) +
prior(gamma(7, 0.4), nlpar = "b", lb = 0) +
prior(beta(1, 20), nlpar = 'p', lb = 0, ub = 1)  +
prior(normal(0, 0.05), dpar = "sigma", lb = 0) +
prior(lognormal(-0.5, 0.5), class = "lscale",coef = "gpTprcondA", nlpar =  "f") +
prior(lognormal(-0.5, 0.5), class = "lscale",coef = "gpTprcondB", nlpar =  "f")+
prior(student_t(3, 0, 0.5), class = 'sdgp', nlpar = "f")
fit_alt_siggp = brm_multiple(brms::bf(formula = y ~ ((1-p)/(1+exp(-a/Tpr + b))+p) + f, a ~ 0 + cond, b ~ 0 + cond, p ~ 0 + cond, nl = TRUE,
f ~ 0 + gp(Tpr, by = cond, k = 10, c = 5/4),
sigma ~ 0 + cond, family = brmsfamily('gaussian', link_sigma = 'identity')),
prior = prior_2_gp,
data = STAlist[71],
control = list(adapt_delta = 0.995, max_treedepth = 15),
sample_prior = "no",
combine = FALSE,
future = TRUE,
chains = 2,
thin = 2,
refresh = 0)
logmlsemialt <- sapply(fit_alt_siggp, try(marlik_semipar_alt))
0.01 * exp(logmlsemialt)/((exp(logmlsemialt) * 0.01 + 0.99 * exp(logmlseminull)) )
fitted_values <- fitted(fit_alt_siggp[[1]])
head(fitted_values)
plot(fit_alt_siggp[[1]], points = TRUE)
data <- STAlist[[71]]
conditions <- data.frame(cond = unique(data$cond))
rownames(conditions) <- unique(data$cond)
alt_sig <- conditional_effects(
fit_alt_siggp[[1]], conditions = conditions,
re_formula = NULL, method = "fitted"
)
plot(alt_sig)
alt_sig.df = as.data.frame(alt_sig$Tpr) %>%
mutate('Abundance' = estimate__)
alt_cond_A = alt_sig.df %>%
filter(cond__ == 'A' )
alt_cond_B = alt_sig.df %>%
filter(cond__ == 'B' )
plot(alt_sig)
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)]) +
theme_classic()
saveRDS(fit_alt_siggp, file = "ACYP1semi.rds")
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)]) +
theme_classic() + ggtitle("ACYP1 semi-parameteric model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
"AP4E1" == idp
which("AP4E1" == idp)
which("AP4S1" == idp)
fullProteinName = tppData_S %>%
group_by(uniqueID) %>%
mutate(count = n()) %>%
#mutate(NAno = sum(!is.na(relAbundance))) %>%
#mutate(allRecord = (count == NAno)) %>%
ungroup() %>%
#mutate(NAno = factor(NAno))  %>%
#filter(allRecord == TRUE) %>%
distinct(uniqueID) %>%
.$uniqueID
tppData_S %>%
filter(uniqueID %in% fullProteinName[c(207, 208, sample.int(4000, 15))]) %>%
#filter(relAbundance < 2) %>%
ggplot(aes(x = Tpr, y = y)) +
geom_point(aes(shape = factor(replicate), color = factor(cond)), size = 2)  + labs(shape="Replicate") +
theme_classic() +
scale_color_manual('Concentration',
values = viridis(10)[c(1,10)]) +
facet_wrap(~ uniqueID) +
geom_smooth(aes(group=cond, colour = factor(cond)),  size = 2, se = FALSE, alpha = 0.7) + ylab("relative solubility")
fullProteinName = tppData_S %>%
group_by(uniqueID) %>%
mutate(count = n()) %>%
#mutate(NAno = sum(!is.na(relAbundance))) %>%
#mutate(allRecord = (count == NAno)) %>%
ungroup() %>%
#mutate(NAno = factor(NAno))  %>%
#filter(allRecord == TRUE) %>%
distinct(uniqueID) %>%
.$uniqueID
tppData_S %>%
filter(uniqueID %in% fullProteinName[c(207, 208, sample.int(4000, 15))]) %>%
#filter(relAbundance < 2) %>%
ggplot(aes(x = Tpr, y = y)) +
geom_point(aes(shape = factor(replicate), color = factor(cond)), size = 2)  + labs(shape="Replicate") +
theme_classic() +
scale_color_manual('Concentration',
values = viridis(10)[c(1,10)]) +
facet_wrap(~ uniqueID) +
geom_smooth(aes(group=cond, colour = factor(cond)),  size = 2, se = FALSE, alpha = 0.7) + ylab("relative solubility")
tppData_S %>%
filter(uniqueID %in% fullProteinName[c(207, 208, sample.int(4000, 15))]) %>%
#filter(relAbundance < 2) %>%
ggplot(aes(x = Tpr, y = y)) +
geom_point(aes(shape = factor(replicate), color = factor(cond)), size = 2)  + labs(shape="Replicate") +
theme_classic() +
scale_color_manual('Concentration',
values = viridis(10)[c(1,10)]) +
facet_wrap(~ uniqueID) +
geom_smooth(aes(group=cond, colour = factor(cond)),  size = 2, se = FALSE, alpha = 0.7) + ylab("relative solubility")
prior_1_gp =  prior(gamma(7, 0.01), nlpar = "a", lb = 0) +
prior(gamma(7, 0.4), nlpar = "b", lb = 0) +
prior(beta(1, 20), nlpar = 'p', lb = 0, ub = 1)  +
prior(normal(0, 0.05), class = "sigma") +
prior(lognormal(-0.5, 0.5), class = "lscale",  coef = "gpTpr", nlpar =  "f") +
prior(student_t(3, 0, 0.5), class = 'sdgp', nlpar = "f")
fit_null_semi = brm_multiple(brms::bf(formula = y ~ ((1-p)/(1+exp(-a/Tpr + b))+p) + f, a+b+p ~ 1, nl = TRUE,
f ~ 0 + gp(Tpr, k = 10, c = 5/4),
family = gaussian()),
prior = prior_1_gp,
data = STAlist[c(207,208)],
control = list(adapt_delta = 0.99),
sample_prior = "no",
combine = FALSE,
future = TRUE,
chains = 2,
thin = 2,
refresh = 0)
logmlseminull <- sapply(fit_null_semi, try(marlik_semipar_null))
prior_2_gp = prior(gamma(7, 0.01), nlpar = "a", lb = 0) +
prior(gamma(7, 0.4), nlpar = "b", lb = 0) +
prior(beta(1, 20), nlpar = 'p', lb = 0, ub = 1)  +
prior(normal(0, 0.05), dpar = "sigma", lb = 0) +
prior(lognormal(-0.5, 0.5), class = "lscale",coef = "gpTprcondA", nlpar =  "f") +
prior(lognormal(-0.5, 0.5), class = "lscale",coef = "gpTprcondB", nlpar =  "f")+
prior(student_t(3, 0, 0.5), class = 'sdgp', nlpar = "f")
fit_alt_siggp = brm_multiple(brms::bf(formula = y ~ ((1-p)/(1+exp(-a/Tpr + b))+p) + f, a ~ 0 + cond, b ~ 0 + cond, p ~ 0 + cond, nl = TRUE,
f ~ 0 + gp(Tpr, by = cond, k = 10, c = 5/4),
sigma ~ 0 + cond, family = brmsfamily('gaussian', link_sigma = 'identity')),
prior = prior_2_gp,
data = STAlist[c(207,208)],
control = list(adapt_delta = 0.995, max_treedepth = 15),
sample_prior = "no",
combine = FALSE,
future = TRUE,
chains = 2,
thin = 2,
refresh = 0)
logmlsemialt <- sapply(fit_alt_siggp, try(marlik_semipar_alt))
0.01 * exp(logmlsemialt)/((exp(logmlsemialt) * 0.01 + 0.99 * exp(logmlseminull)) )
fitted_values <- fitted(fit_alt_siggp[[2]])
head(fitted_values)
plot(fit_alt_siggp[[1]], points = TRUE)
data <- STAlist[[208]]
conditions <- data.frame(cond = unique(data$cond))
rownames(conditions) <- unique(data$cond)
alt_sig <- conditional_effects(
fit_alt_siggp[[1]], conditions = conditions,
re_formula = NULL, method = "fitted"
)
plot(alt_sig)
alt_sig.df = as.data.frame(alt_sig$Tpr) %>%
mutate('Abundance' = estimate__)
alt_cond_A = alt_sig.df %>%
filter(cond__ == 'A' )
alt_cond_B = alt_sig.df %>%
filter(cond__ == 'B' )
plot(alt_sig)
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)]) +
theme_classic() + ggtitle("ACYP1 semi-parameteric model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
fitted_values <- fitted(fit_alt_siggp[[2]])
head(fitted_values)
plot(fit_alt_siggp[[2]], points = TRUE)
data <- STAlist[[208]]
conditions <- data.frame(cond = unique(data$cond))
rownames(conditions) <- unique(data$cond)
alt_sig <- conditional_effects(
fit_alt_siggp[[2]], conditions = conditions,
re_formula = NULL, method = "fitted"
)
plot(alt_sig)
alt_sig.df = as.data.frame(alt_sig$Tpr) %>%
mutate('Abundance' = estimate__)
alt_cond_A = alt_sig.df %>%
filter(cond__ == 'A' )
alt_cond_B = alt_sig.df %>%
filter(cond__ == 'B' )
plot(alt_sig)
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)]) +
theme_classic() + ggtitle("ACYP1 semi-parameteric model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)]) +
theme_classic() + ggtitle("AP4S1 semi-parameteric model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)], guide_legend(title="Condition")) +
theme_classic() + ggtitle("AP4S1 semi-parameteric model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
#saveRDS(fit_alt_siggp, file = "ACYP1semi.rds")
saveRDS(fit_alt_siggp, file = "AP4S1semi.rds")
tppData_S = tppData %>%
filter(dataset == "Staurosporine")
colnames(tppData_S)[3:5] <- c("y", "Tpr", "cond")
tppData_S$cond[tppData_S$cond == 0] <- "A"
tppData_S$cond[tppData_S$cond == 20] <- "B"
STAlist <- group_split(tppData_S, uniqueID)
STAlist <- lapply(STAlist, function(x) data.frame(x))
prior_1 =  prior(gamma(7, 0.01), nlpar = "a", lb = 0) +
prior(gamma(7, 0.4), nlpar = "b", lb = 0) +
prior(beta(1, 20), nlpar = 'p', lb = 0, ub = 1) +
prior(normal(0, 0.05), class = "sigma")
null_model_res <- brm_multiple(brms::bf(y ~ (1 - p)/(1 + exp(b - (a/Tpr))) + p, a+b+p~1, nl = TRUE),
data = STAlist[c(208)],
prior = prior_1,
control = list(adapt_delta = 0.8),
sample_prior = "no",
combine = FALSE,
future = FALSE,
chains = 2,
refresh = 0)
prior_2 =  prior(gamma(7, 0.01), nlpar = "a", lb = 0) +
prior(gamma(7, 0.4), nlpar = "b", lb = 0) +
prior(beta(1, 20), nlpar = 'p', lb = 0, ub = 1) +
prior(normal(0, 0.05), dpar = "sigma", lb = 0)
alt_model_res <- brm_multiple(brms::bf(formula = y ~ ((1-p)/(1+exp(-(a/Tpr-b)))+p), a ~ 0 + cond, b ~ 0 + cond, p ~ 0 + cond, nl = TRUE,
sigma ~ 0 + cond, family = brmsfamily('gaussian', link_sigma = 'identity')),
prior = prior_2,
data = STAlist[c(208)],
control = list(adapt_delta = 0.99, max_treedepth = 15),
sample_prior = "no",
combine = FALSE,
future = FALSE,
chains = 2,
refresh = 0)
logmlsignull <- sapply(null_model_res, marlik_sigmoid_null)
logmlsigalt <- sapply(alt_model_res, marlik_sigmoid_alt)
0.01 * exp(logmlsigalt)/(exp(logmlsigalt) * 0.01 + 0.99 * exp(logmlsignull))
#saveRDS(alt_model_res, file = "ALS2sig.rds")
#saveRDS(alt_model_res, file = "ABCC4.rds")
#saveRDS(alt_model_res, file = "ACYP1.rds")
saveRDS(alt_model_res, file = "AP4S1sig.rds")
fitted_values <- fitted(alt_model_res[[1]])
head(fitted_values)
plot(alt_model_res[[1]], points = TRUE)
data <- STAlist[[208]]
conditions <- data.frame(cond = unique(data$cond))
rownames(conditions) <- unique(data$cond)
alt_sig <- conditional_effects(
alt_model_res[[1]], conditions = conditions,
re_formula = NULL, method = "fitted"
)
plot(alt_sig)
alt_sig.df = as.data.frame(alt_sig$Tpr) %>%
mutate('Abundance' = estimate__)
alt_cond_A = alt_sig.df %>%
filter(cond__ == 'A' )
alt_cond_B = alt_sig.df %>%
filter(cond__ == 'B' )
plot(alt_sig)
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)], guide_legend(title="Condition")) +
theme_classic() + ggtitle("AP4S1 sigmoid model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)], guide_legend(title="Condition")) +
theme_classic() + ggtitle("AP4S1 sigmoid model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
loo(alt_model_res)
loo(alt_model_res[[1]])
loo(alt_model_res[[1]], fit_alt_siggp[[2]])
pp_check(fit_alt_siggp)
pp_check(fit_alt_siggp[[2]])
pp_check(fit_alt_siggp[[2]], group = TRUE)
pp_check(fit_alt_siggp[[2]], 100)
pp_check(fit_alt_siggp[[2]], nsamples = 100)
pp_check(fit_alt_siggp[[2]], ntype = data, samples = 100)
pp_check(fit_alt_siggp[[2]], type = data, samples = 100)
pp_check(fit_alt_siggp[[2]], type = "data", samples = 100)
pp_check(fit_alt_siggp[[2]], type = "data", group = TRUE, samples = 100)
pp_check(fit_alt_siggp[[2]], type = "data", group = cond, samples = 100)
pp_check(fit_alt_siggp[[2]], type = "data", group = con, samples = 100)
pp_check(fit_alt_siggp[[2]], type = "error_hist", samples = 100)
pp_check(fit_alt_siggp[[2]], type = "error_scatter", samples = 100)
pp_check(fit_alt_siggp[[2]], type = "ribbon", samples = 100)
pp_check(fit_alt_siggp[[2]], type = "ribbon_data", samples = 100)
pp_check(fit_alt_siggp[[2]], type = "intervals", samples = 100)
pp_check(fit_alt_siggp[[2]], type = "intervals_grouped", samples = 100)
pp_check(fit_alt_siggp[[2]], type = "intervals_grouped", samples = 100, group = rep(1:4,each = 10))
pp_check(fit_alt_siggp[[2]], type = "intervals_grouped", samples = 100, group = rep(c("A", "B", "C", "D"),each = 10))
pp_check(fit_alt_siggp[[2]], type = "intervals_grouped", samples = 100, group = TRUE)
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)], guide_legend(title="Condition")) +
theme_classic() + ggtitle("AP4S1 semi-parameteric model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
fitted_values <- fitted(fit_alt_siggp[[2]])
head(fitted_values)
plot(fit_alt_siggp[[2]], points = TRUE)
data <- STAlist[[208]]
conditions <- data.frame(cond = unique(data$cond))
rownames(conditions) <- unique(data$cond)
alt_sig <- conditional_effects(
fit_alt_siggp[[2]], conditions = conditions,
re_formula = NULL, method = "fitted"
)
plot(alt_sig)
alt_sig.df = as.data.frame(alt_sig$Tpr) %>%
mutate('Abundance' = estimate__)
alt_cond_A = alt_sig.df %>%
filter(cond__ == 'A' )
alt_cond_B = alt_sig.df %>%
filter(cond__ == 'B' )
plot(alt_sig)
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)], guide_legend(title="Condition")) +
theme_classic() + ggtitle("AP4S1 semi-parameteric model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)], guide_legend(title="Condition")) +
theme_classic() + ggtitle("AP4S1 semi-parameteric model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
pp_check(fit_alt_siggp[[2]], type = data, samples = 100)
pp_check(fit_alt_siggp[[2]], samples = 100)
pp_check(fit_alt_siggp[[2]], samples = 100)
pp_check(fit_alt_siggp[[2]], nsamples = 100)
pp_check(alt_model_res, nsamples = 100)
pp_check(alt_model_res[[1]], nsamples = 100)
pp_check(fit_alt_siggp[[2]], type = "intervals", samples = 100)
pp_check(alt_model_res[[1]], type = "intervals", samples = 100)
pp_check(alt_model_res[[1]], type = "ribbon", samples = 100)
pp_check(fit_alt_siggp[[2]], type = "ribbon", samples = 100)
ggplot()+
geom_line(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color= viridis(2)[1] ,size=4) +
geom_line(data = alt_cond_A, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),color=viridis(2)[2],size=4) +
geom_ribbon(data = alt_cond_B, aes(x=Tpr, y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[1]) +
geom_ribbon(data = alt_cond_A, aes(x=Tpr,y=Abundance,ymin=lower__,ymax=upper__),alpha=0.5,fill=viridis(2)[2]) +
geom_point(data = data, aes(x=Tpr,y=y,color = factor(cond))) + scale_color_manual(values = viridis(2)[c(2,1)], guide_legend(title="Condition")) +
theme_classic() + ggtitle("AP4S1 semi-parameteric model") + xlab("Temperature") + ylab("relative solubility") + theme(plot.title = element_text(size = 16), text = element_text(size=14))
fullProteinName = tppData_S %>%
group_by(uniqueID) %>%
mutate(count = n()) %>%
#mutate(NAno = sum(!is.na(relAbundance))) %>%
#mutate(allRecord = (count == NAno)) %>%
ungroup() %>%
#mutate(NAno = factor(NAno))  %>%
#filter(allRecord == TRUE) %>%
distinct(uniqueID) %>%
.$uniqueID
tppData_S %>%
filter(uniqueID %in% fullProteinName[c(207, 208, sample.int(4000, 15))]) %>%
#filter(relAbundance < 2) %>%
ggplot(aes(x = Tpr, y = y)) +
geom_point(aes(shape = factor(replicate), color = factor(cond)), size = 2)  + labs(shape="Replicate") +
theme_classic() +
scale_color_manual('Concentration',
values = viridis(10)[c(1,10)]) +
facet_wrap(~ uniqueID) +
geom_smooth(aes(group=cond, colour = factor(cond)),  size = 2, se = FALSE, alpha = 0.7) + ylab("relative solubility")
tppData_S %>%
filter(uniqueID %in% fullProteinName[c(207, 208, sample.int(4000, 15))]) %>%
#filter(relAbundance < 2) %>%
ggplot(aes(x = Tpr, y = y)) +
geom_point(aes(shape = factor(replicate), color = factor(cond)), size = 2)  + labs(shape="Replicate") +
theme_classic() +
scale_color_manual('Concentration',
values = viridis(10)[c(1,10)]) +
facet_wrap(~ uniqueID) +
geom_smooth(aes(group=cond, colour = factor(cond)),  size = 2, se = FALSE, alpha = 0.7) + ylab("relative solubility")
require(installr)
updateR()
install.packages("xfun")
setwd("C:/Users/OllyC/Desktop/IonMobility/IonMobility")
library(IonMobility)
